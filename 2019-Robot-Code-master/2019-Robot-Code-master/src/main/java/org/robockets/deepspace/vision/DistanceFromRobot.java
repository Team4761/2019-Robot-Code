package org.robockets.deepspace.vision;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;


import edu.wpi.cscore.VideoSource;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.vision.VisionPipeline;
import edu.wpi.first.vision.VisionThread;
import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

import static java.lang.Math.cos;
import static java.lang.Math.tan;

	/**
	 * DistanceFromRobot class.
	 *
	 * <p>An OpenCV pipeline generated by GRIP.
	 *
	 * @author GRIP
	 */
	public class DistanceFromRobot implements VisionPipeline{

		//Outputs
		private Mat hsvThresholdOutput = new Mat();
		private ArrayList<Line> findLinesOutput = new ArrayList<>();
		private ArrayList<Line> filterLinesOutput = new ArrayList<>();
		private ArrayList<Line> UnpitchedLinesOutput = new ArrayList<>();
		private static double FinalAngle;
		private static double FinalWidth;

		private static NetworkTable visionTable;
		private boolean NoLines = false;

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	@Override public void process(Mat source0) {
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;
		double[] hsvThresholdHue = {0.0, 180.0};
		double[] hsvThresholdSaturation = {0.0, 33.07167235494882};
		double[] hsvThresholdValue = {224.73021582733813, 255.0};
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Find_Lines0:
		Mat findLinesInput = hsvThresholdOutput;
		findLines(findLinesInput, findLinesOutput);

		if (!NoLines) {

			// Step Filter_Lines0:
			ArrayList<Line> filterLinesLines = findLinesOutput;
			double filterLinesMinLength = 53.0;
			double[] filterLinesAngle = {0.0, 360.0};
			filterLines(filterLinesLines, filterLinesMinLength, filterLinesAngle, filterLinesOutput);

			//Step Unpitch_Lines0:
			ArrayList<Line> unpitchedlines = filterLinesOutput;
			double pitch = 20.0;
			double FOV = 62.8;
			UnpitchLines(unpitchedlines, pitch, FOV, UnpitchedLinesOutput);

			//Step Find_Width0:
			ArrayList<Line> linesforwidth = UnpitchedLinesOutput;
			double width = 0.0;
			FindWidth(linesforwidth, width);
			double angle = UnpitchedLinesOutput.get(0).angle();

			//Step Return_Data0:
			FinalWidth = width;
			FinalAngle = angle;
		} else {
			FinalAngle = 0.0;
			FinalWidth = 0.0;
		}
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Lines.
	 * @return ArrayList<Line> output from Find_Lines.
	 */
	public ArrayList<Line> findLinesOutput() {
		return findLinesOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Lines.
	 * @return ArrayList<Line> output from Filter_Lines.
	 */
	public ArrayList<Line> filterLinesOutput() {
		return filterLinesOutput;
	}

	/**THIS IS MY CRAP NOW HAHAHHAHAUHUDWUGIA*/
	public ArrayList<Line> UnpitchedLinesOutput() {
		return UnpitchedLinesOutput;
	}

	public double getFinalAngle() {
		return FinalAngle;
	}
	public double getFinalWidth() {
		return FinalWidth;
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param val The min and max value
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
	    Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
			new Scalar(hue[1], sat[1], val[1]), out);
	}

	public static class Line {
		public final double x1, y1, x2, y2;

		public Line(double x1, double y1, double x2, double y2) {
			this.x1 = x1;
			this.y1 = y1;
			this.x2 = x2;
			this.y2 = y2;
		}

		public double lengthSquared() {
			return Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2);
		}
		public double length() {
			return Math.sqrt(lengthSquared());
		}
		public double angle() {
			return Math.toDegrees(Math.atan2(y2 - y1, x2 - x1));
		}
		public double slope() {
			return (y2 - y1) / (x2 - x1);
		}

		public double getX1() {
			return x1;
		}
		public double getY1() {
			return y1;
		}
		public double getX2() {
			return x2;
		}
		public double getY2() {
			return y2;
		}
	}
	/**
	 * Finds all line segments in an image.
	 * @param input The image on which to perform the find lines.
	 * @param lineList The output where the lines are stored.
	 */
	private void findLines(Mat input, ArrayList<Line> lineList) {
		final LineSegmentDetector lsd = Imgproc.createLineSegmentDetector();
		final Mat lines = new Mat();
		lineList.clear();
		if (input.channels() == 1) {
			lsd.detect(input, lines);
		} else {
			final Mat tmp = new Mat();
			Imgproc.cvtColor(input, tmp, Imgproc.COLOR_BGR2GRAY);
			lsd.detect(tmp, lines);
		}
		if (!lines.empty()) {
			for (int i = 0; i < lines.rows(); i++) {
				lineList.add(new Line(lines.get(i, 0)[0], lines.get(i, 0)[1],
					lines.get(i, 0)[2], lines.get(i, 0)[3]));
			}
		}
		if (lines.empty()) {
			NoLines = true;
		}
	}

	/**
	 * Filters out lines that do not meet certain criteria.
	 * @param inputs The lines that will be filtered.
	 * @param minLength The minimum length of a line to be kept.
	 * @param angle The minimum and maximum angle of a line to be kept.
	 * @param outputs The output lines after the filter.
	 */
	private void filterLines(ArrayList<Line> inputs,double minLength,double[] angle,
		ArrayList<Line> outputs) {
		outputs = (ArrayList<Line>) inputs.stream()
				.filter(line -> line.lengthSquared() >= Math.pow(minLength,2))
				.filter(line -> (line.angle() >= angle[0] && line.angle() <= angle[1])
				|| (line.angle() + 180.0 >= angle[0] && line.angle() + 180.0 <= angle[1]))
				.collect(Collectors.toList());
	}

	private void UnpitchLines(ArrayList<Line> inputs, double pitch, double FOV, ArrayList<Line> unpitched) {
		double fovdist = tan((FOV * 0.5 + Math.PI/180.0)); //TODO: I am unsure about if the pi & 180 is needed, idk if this works with radians or degrees
		double afovdist = 1.0/fovdist;

		ArrayList<Double> pointy1 = new ArrayList<>();
		ArrayList<Double> pointx1 = new ArrayList<>();
		ArrayList<Double> pointy2 = new ArrayList<>();
		ArrayList<Double> pointx2 = new ArrayList<>();

		for(int i=0; i < inputs.size(); i++) {
			 pointy1.set(i, (inputs.get(i).getY1() * fovdist) / (fovdist * Math.sin(-pitch) - inputs.get(i).getY1() * cos(pitch)));
			 pointx1.set(i, (inputs.get(i).getX1() * pointy1.get(i) * cos(pitch) + fovdist) / fovdist);
			 pointy2.set(i, (inputs.get(i).getY2() * fovdist) / (fovdist * Math.sin(-pitch) - inputs.get(i).getY2() * cos(pitch)));
			 pointx2.set(i, (inputs.get(i).getX2() * pointy2.get(i) * cos(pitch) + fovdist) / fovdist);
			//MATH IS A-OK PEOPLE

			unpitched.set(i, new Line(pointx1.get(i), pointy1.get(i), pointx2.get(i), pointy2.get(i)));
		}
	}

	private void FindWidth(ArrayList<Line> unpitched, double width) {//THIS IS ASSUMING THERE ARE ONLY TWO VISIBLE LINES!!!!
		double searchslope = -1.0/unpitched.get(0).slope();
		Line widthsearch = new Line(unpitched.get(0).getX1(),unpitched.get(0).getY1(),unpitched.get(2).getX1(),unpitched.get(2).getY1());
		width = widthsearch.length();
	}

	//use network tables to return the width the robot sees and the angle
	public static void main(String... args) {

		// start NetworkTables
		NetworkTableInstance ntinst = NetworkTableInstance.getDefault();
		System.out.println("Setting up NetworkTables client for team " + 4761);
		ntinst.startClientTeam(4761);

		visionTable = ntinst.getTable("VisionTable");

		// start cameras
		List<VideoSource> cameras = new ArrayList<>();

		// start image processing on camera 0 if present
		if (cameras.size() >= 1) {
			VisionThread visionThread = new VisionThread(cameras.get(0),
					new DistanceFromRobot(), pipeline -> {
				// do something with pipeline results
				visionTable.getEntry("Angle").setNumber(FinalAngle);
				visionTable.getEntry("ViewedWidth").setNumber(FinalWidth);
			});
      /* something like this for GRIP:
      VisionThread visionThread = new VisionThread(cameras.get(0),
              new GripPipeline(), pipeline -> {
        ...
      });
       */
			visionThread.start();
		}

		// loop forever
		for (;;) {
			try {
				Thread.sleep(10000);
			} catch (InterruptedException ex) {
				return;
			}
		}
	}

}
